import tkinter as tk    #импортируем нужные модули
from math import *
import tkinter
from tkinter import *
import keyboard
func2=""    #присвоение переменным значений
w=500
h1=500
h2=560
indent=20
indent2=10
k=31
f=0

root1 = Tk()    #создание холста
c = Canvas(root1, width=500, height=560)
c.create_rectangle(-10, -10, w+10, h1, fill="black")
c.create_line(w/2, indent, w/2, h2-indent, fill='white')
c.create_line(indent, h1/2, w-indent, h1/2, fill='white')
c.create_line(w-indent-indent2,h1/2-indent2,w-indent,h1/2,w-indent-indent2,h1/2+indent2, fill='white')
c.create_line(w/2-indent2,indent+indent2,w/2,indent,w/2+indent2,indent+indent2, fill='white')
g=(w//2)//k
for i in range(0, g):
    if i != 0:
        c.create_text(w / 2 + i * k, h1 / 2 + 12, text=i, fill='white')
        c.create_text(w / 2 - 10, h1 / 2 - i * k, text=i, fill='white')
    c.create_line(w / 2 + i * k, h1 / 2 - 4, w / 2 + k * i, h1 / 2 + 4, fill='white')
    c.create_line(h1 / 2 - 4, w / 2 + i * k, h1 / 2 + 4, w / 2 + k * i, fill='white')
for i in range(0, g):
    f=f-1
    c.create_text(w / 2 + f * k-4, h1 / 2 + 16, text=f, fill='white')
    c.create_text(w / 2 - 14, h1 / 2 - f * k, text=f, fill='white')
    c.create_line(w / 2 + f * k, h1 / 2 - 4, w / 2 + k * f, h1 / 2 + 4, fill='white')
    c.create_line(h1 / 2 - 4, w / 2 + f * k, h1 / 2 + 4, w / 2 + k * f, fill='white')
for i in range(0,g):
    c.create_line(w/2+i * k, h1 / 2 - 4, w/2+k * i, h1 / 2 + 4, fill='white')
    c.create_line(h1 / 2 - 4, w/2+i * k, h1 / 2 + 4, w/2+k * i, fill='white')
for j in range(1, g):
    f = f - 1
    c.create_line(w / 2 + f * k, h1 / 2 - 4, w / 2 + k * f, h1 / 2 + 4, fill='white')
    c.create_line(h1 / 2 - 4, w / 2 + f * k, h1 / 2 + 4, w / 2 + k * f, fill='white')
f=0
for i in range(1, g):
    c.create_line(w / 2 + i * k, h1 / 2 - 4, w / 2 + k * i, h1 / 2 + 4, fill='white')
    c.create_line(h1 / 2 - 4, w / 2 + i * k, h1 / 2 + 4, w / 2 + k * i, fill='white')
for i in range(0, g):
    f = f - 1
    print(f)
    c.create_line(w / 2 + f * k, h1 / 2 - 4, w / 2 + k * f, h1 / 2 + 4, fill='white')
    c.create_line(h1 / 2 - 4, w / 2 + f * k, h1 / 2 + 4, w / 2 + k * f, fill='white')
c.create_rectangle(0, 0, 500, 20, fill="black")
c.create_rectangle(0, 0, 20, 500, fill="black")
c.create_rectangle(0, 480, 500, 500, fill="black")
c.create_rectangle(480, 0, 500, 500, fill="black")
c.create_rectangle(0, 500, 505, 565, fill='gray90')
c.pack()
plus = Button(root1,text="+", width=6, height=2, command=lambda: plus())    #создание кнопок уменьшения и увеличения
minus = Button(root1, text="-", width=6, height=2, command=lambda: minus())
plus.place(x='195', y='510')
minus.place(x='255', y='510')

def plus():    #функция кнопки увеличения
    global k
    k=k+10
    do_draw(func2,k)


def minus():    #функция кнопки уменьшения
    global k
    if k>11:
        k=k-10
        do_draw(func2,k)



def do_draw(func1,k):     #отрисовка функции
    f=0
    x = -30
    c.create_rectangle(0, 0, w, h1, fill="black")
    c.create_line(w / 2, indent, w / 2, h2 - indent, fill='white')
    c.create_line(indent, h1 / 2, w - indent, h1 / 2, fill='white')
    c.create_line(w - indent - indent2, h1 / 2 - indent2, w - indent, h1 / 2, w - indent - indent2, h1 / 2 + indent2,
                  fill='white')
    c.create_line(w / 2 - indent2, indent + indent2, w / 2, indent, w / 2 + indent2, indent + indent2, fill='white')
    if k>=30:
        g = (w // 2) // k
        for i in range(0, g):
            if i != 0:
                c.create_text(w / 2 + i * k, h1 / 2 + 12, text=i, fill='white')
                c.create_text(w / 2 - 10, h1 / 2 - i * k, text=i, fill='white')
            c.create_line(w / 2 + i * k, h1 / 2 - 4, w / 2 + k * i, h1 / 2 + 4, fill='white')
            c.create_line(h1 / 2 - 4, w / 2 + i * k, h1 / 2 + 4, w / 2 + k * i, fill='white')
        for i in range(0, g):
            f=f-1
            c.create_text(w / 2 + f * k-4, h1 / 2 + 16, text=f, fill='white')
            c.create_text(w / 2 - 14, h1 / 2 - f * k, text=f, fill='white')
            c.create_line(w / 2 + f * k, h1 / 2 - 4, w / 2 + k * f, h1 / 2 + 4, fill='white')
            c.create_line(h1 / 2 - 4, w / 2 + f * k, h1 / 2 + 4, w / 2 + k * f, fill='white')
    if k<30:
        g = (w // 2) // k
        for i in range(0, g):
            if i != 0 and i%5==0:
                c.create_text(w / 2 + i * k, h1 / 2 + 12, text=i, fill='white')
                c.create_text(w / 2 - 10, h1 / 2 - i * k, text=i, fill='white')
                c.create_line(w / 2 + i * k, h1 / 2 - 4, w / 2 + k * i, h1 / 2 + 4, fill='white')
                c.create_line(h1 / 2 - 4, w / 2 + i * k, h1 / 2 + 4, w / 2 + k * i, fill='white')
        for i in range(0, g):
            f=f-1
            if f%5==0:
                c.create_text(w / 2 + f * k-4, h1 / 2 + 16, text=f, fill='white')
                c.create_text(w / 2 - 14, h1 / 2 - f * k, text=f, fill='white')
                c.create_line(w / 2 + f * k, h1 / 2 - 4, w / 2 + k * f, h1 / 2 + 4, fill='white')
                c.create_line(h1 / 2 - 4, w / 2 + f * k, h1 / 2 + 4, w / 2 + k * f, fill='white')
    if "sin" in func1:
        func = func1.replace('sin', 'math.sin')
    if "cos" in func1:
        func = func1.replace('cos', 'math.cos')
    if "tan" in func1:
        func = func1.replace('tan', 'math.tan')
    if not ("sin" in func1 or "cos" in func1 or "tan" in func1):
        func = func1

    while x < 30:
        y = eval('exec("import math") or ' + func, {"x": x})
        y1 = eval('exec("import math") or ' + func, {"x": x + 0.1})
        if (y1 - y) < 40 and (y1 - y) > -40:
            c.create_line(250 + x * k, 250 - y * k, 250 + (x + 0.1) * k, 250 - y1 * k, fill='white', width="2")
        x += 0.1
    c.create_rectangle(0, 0, 500, 20, fill="black")
    c.create_rectangle(0, 0, 20, 500, fill="black")
    c.create_rectangle(0, 480, 500, 500, fill="black")
    c.create_rectangle(480, 0, 500, 500, fill="black")
    c.create_rectangle(0, 500, 505, 565, fill='gray90')
    root1.mainloop()


def submit_callback(input_entry):
    global func2
    entry = input_entry.get()
    func2=entry
    do_draw(entry,k)
    return None

root = tk.Tk()
root.geometry('300x150')
root.configure(background='black')
heading = tk.Label(root, text="Введите функцию, график \nкоторой нужно построить", bg='black', fg='white')
heading.place(x=80, y=10)
input_label = tk.Label(root, text="Функция:", bg='black', fg='white')
input_label.place(x=15, y=60)
input_entry = tk.Entry(root)
input_entry.place(x=80, y=60, width='200')
submit_button = tk.Button(root, text="Enter", width="20", bg='gray', command=lambda: submit_callback(input_entry))
submit_button.place(x=80, y=100)
if keyboard.is_pressed("enter") is True:
    submit_callback(input_entry)
root.mainloop()
